
View using: https://www.planttext.com/

@startuml

title Mario Kart 8 - Class Diagram


' Emmie:

class PlayerKartSelector{
 - array Character characterArray
 - array Kart kartArray
 - array Tires tiresArray
 - array Glider gliderArray
 
 +  PlayerKart player

 - Character SetCharacter(PlayerKart player)
 - Kart SetKart(PlayerKart player)
 - Tires SetTires(PlayerKart player)
 - Glider SetGlider(PlayerKart player)
}

class PlayerKart {
 - float playerSpeed
 - float playerAcceleration
 - float playerWeight
 - float playerHandling
 - float playerTraction
 - float playerMiniTurbo
  
 + Character selectedCharacter
 + Kart selectedKart
 + Tires selectedTires
 + Glider selectedGlider
  
 - void SetValues(Character c, Kart, k, Tires t, Glider g)
}

class KartComponent {
 + float speed
 + float acceleration
 + float weight
 + float handling
 + float traction
 + float miniTurbo
}

class Character
class Kart
class Tires
class Glider

KartComponent <|-down- Kart: Inheritance
KartComponent <|-down- Character: Inheritance
KartComponent <|-down- Tires: Inheritance
KartComponent <|-down- Glider: Inheritance

PlayerKart -up-*Kart
PlayerKart -up-*Character
PlayerKart -up-*Tires
PlayerKart -up-*Glider

PlayerKartSelector -left-*PlayerKart


' Joy:

interface ICollectable{
  +float respawnTime
  +void respawnTimer()
  +void Destroy()
  +void Spawn()
  +void Collect()
}

class ItemGiver{
  +Item items[]
  +Item GenerateItem(int playerPosition)
}

class Coin{
  +float respawnTime
  +void Destroy()
  +void Spawn()
  +void Collect()
  +float RespawnTimer()
}

class ItemBox{
  ItemGiver itemGiver
  +float respawnTime
  +void Destroy()
  +void Spawn()
  +void Collect()
  +float RespawnTimer()
  +void OnCollisionEnter(Collision player)
}

abstract class Item{
  +string name
  +float dropChance
  +void PickUp()
  +void Use()
}

class RedShell{
  +string name
  +float dropChance
  +void PickUp()
  +void Use()
}

class Banana{
  +string name
  +float dropChance
  +void PickUp()
  +void Use()
}

class BulletBill{
  +string name
  +float dropChance
  +void PickUp()
  +void Use()
}

Item <|-down- RedShell: Implementation
Item <|-down- Banana: Implementation
Item <|-down- BulletBill: Implementation
ItemGiver *-- ItemBox: Has 
ICollectable <|-down- ItemBox: Interface
ICollectable <|-down- Coin: Interface


' Marc:

+interface IDestructable {
  +void Destroy()
}

class Track {
  +array Driver drivers
  +array Crate crates
  +array Coin coins
  +array ItemBox itemBoxes
  
  void SpawnDrivers()
}

class Driver {
  -Vector3d pos
  +int racePosition
  +array Checkpoint passedCheckpoints
  
  -void ResetCheckpoints
  +void ResetDriver()
  +void OntriggerEnter()
}

class Checkpoint {
  +Vector3d pos
}
class StartLine {
  +array StartSpot startSpots
}

class StartSpot {
  +Vector3d pos
}

class MovingPlatform {
  #Vector3d pos
  
  +Vector3d targetPos1
  +Vector3d targetPos2
  
  void Move()
}

class Crate {
  -float RespawnTimer
  
  +void Destroy()
  -void Spawn()
}

class Booster

class Ramp

Track -down-*Checkpoint
Track -down-*Booster
Track -down-*Ramp
Track -down-*MovingPlatform
Track -down-*Crate
Track -down-*StartLine
Track-up-*Coin
Track-up-*ItemBox

StartLine -down-*StartSpot

IDestructable <|-down- Crate

Checkpoint <|-down- StartLine: Inheritance

Driver -- Checkpoint


@enduml